Shree Madan
SciComp Fall 2023
Project 2 Water Migration on the Moon: Project Plan

My repository name is scicomp-p2-moon-water-migration and I’ll be doing this project on my own.

I already know my time is going to be more difficult to manage with the second project for a number of reasons. I have a lot of travel slated for October so there are multiple days where I’ll be out of town as well as multiple evenings where I have previously scheduled events. I also realised that I have big projects in other classes due on the same days as the mid-point check-in and the code submission so I’ve taken that into account for my schedule but I know that having that will mean that I’ll need to be flexible and constantly update my plan as things come up in my other projects.

Read Paper (10/2)
Annotate Paper/Take Notes on Paper (10/4)
Make Plan (10/5)
Decide whether to team (10/1)
Make tasks (10/5)
Decide computing skill (10/5)
Decide benchmark (10/5)
Pseudocode of entire model (10/07)

Note: I’m suspecting that my lists of tasks for the drafts will need to be updated based on this pseudocode as that is just my first pass of general functions/variables that will need to be added. The main goal of having the drafts is to set deadlines for having the entire model coded (even if the code is circular/inefficient to start with) since I learnt in the last project that this method of planning is more likely to be successful for me.

Migration Simulation Draft 1 (10/12)
    Molecule Loss Implementation (10/8)
        Destruction/True loss
        Capture
    Hopping Algorithm (10/9)
        Initial trajectory conditions
        Trajectory calculation
        STRETCH GOAL: Surface temperature
    Inputs (10/8)
        Planetary radius
        Surface gravity
        Surface temperature
        Molecular mass
        Photodestruction timescale (variable)
        Description of capture regions (variable)
        Number of molecules per run
        Number of runs in simulation
    Outputs (10/9)
        Percent of stable molecules (Fig. 4)
Mid-Project Peer Review (10/12)
Migration Simulation Draft 2 (10/19)
    Molecule Loss Implementation (10/16)
        Incorporate feedback
        Refactor
        Comments
    Hopping Algorithm (10/16)
        Incorporate feedback
        Refactor
        Comments
    Data Handling (10/18)
        Plots
            Percent of stable molecules
            Stable molecules plotted against starting latitude
        Results writeup for benchmark
            Compare plots to paper’s plots
Benchmark Testing (10/21)
    Have multiple people test code (with varying levels of programming experience)
    Create form?
Code Submission (10/23)
    Finalise code based on feedback (10/21)
Code Review (10/23)
Read textbook (10/18)
    Ch 3 (10/18)
    Ch 4 (10/18)
Presentation (10/30)
    Presentation outline (10/25)
    Make slides (10/26)
    Practice pres/be comfortable with timing (10/28)
Presentation Peer Review (10/30)
Reflection (11/3)

One of the things I realised in the last project while I was refactoring is that documentation (READMEs, docstrings, comments, etc.) is huge part of creating code that anyone can use. Although I ended up doing ok with my documentation in the last project, I want to learn to be more intentional with it. I tend to code like a patchwork blanket where each individual piece is created separately and I usually don’t think about the entire narrative until the very end when I’m frantically adding documentation. Part of the reason I want this to be my learning goal is because I think writing good documentation will help me better understand my own code (since I’ll need to be able to explain it easily). The final reason I’m choosing this as my goal is because I want to practice writing/explaining code in concise and clear writing. I definitely have read back my comments and thought “Oh, only another developer could understand this.” and that’s something I want to avoid.

I have two benchmarks for this project. First of all, I’d like to recreate two figures from the paper: Figure 4 which is a histogram of the number of stable molecules and Figure 5 which is a histogram of the starting latitudes and the percentage of stable molecules. Part of the reason I’m choosing these two specific figures it because my base model should be able to answer these questions for me and wouldn’t require any stretch implementations on my part. My goal is not to create identical figures but rather replicate the trends they saw. For Figure 4 that would mean seeing a normal distribution/bell curve in the histogram and for Figure 5 it should be a logarithmic decay for the moon and a more traditional logarithmic curve with a drop towards the end for Mercury. To summarize, the goal is to get these general shapes with similar values but slight variations on it are fine so long as the trends are comparable. The second benchmark is less about the accuracy of my code but rather evaluating my computing skill. One of the tasks I’ve included is giving multiple people my repository and seeing what is/isn’t clear. The reason I’m including this as a benchmark is because my goal is to have someone who has taken an entry-level programming class (such as Software Design) be able to read through the documentation and feel comfortable in starting to use the code. I’m planning on doing this with people of various experience and am still figuring out what would be the best testing/data collection process for this. Currently, I’m leaning towards making a form and using the results of those as the evaluation of my benchmark.
